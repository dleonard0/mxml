
We have an XML-formatted structured key-value store that is
primarily READ, and sometimes written with small EDITs.

So, this is a design for a small C library that can access
an XML file efficiently using mmap, and providing access
to elements with a custom search pattern.

	a		text content of <a>...</a>
	a.b.c		text content of first <a><b><c>...</c>...
	a.b[3].c	same as  a.bs.b3.c
	a.b[#]		same as  a.bs.total

Processing instructions, comments, attributes are ignored.
Namespaces are not understood. Whitespace in text elements
is preserved. CDATA is understood.

Because only some keys are needed in an invocation and often
having a similar prefix to another one accessed, the entire
file is not read, and a prefix cache is kept. 

Returned values will be copies, because we have to
NUL-terminate the values anyway, even if no entity
escapes are used.



The second function of this library is to emit a new
XML document, based on the read-only document from memory,
while applying a sequence of edits to it.

	DELETE		- removes a leaf element
	ADD		- adds new, empty leaf element
	REPLACE		- replaces text content of leaf

This attempts to preserve the source document as closely
as possible. The design is a stream processing stack;
each stream processor handles the three messages
<open>,text,</close> and may remove itself from the stream.
