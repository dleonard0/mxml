
mxml is a C library to access an XML file as a key-value store.

It has the following design properties:
 - Fast and low-memory in the expected common case of
   reading proximate keys
 - Low on memory use when changing and saving keys
 - Ability to support Opengear's "list" convention

It has the following limitations:
 - Processing instructions, comments, attributes are ignored
 - Namespaces are not understood
 - CDATA is not understood
 - Tag names are assumed unique within the parent
 - Only the three basic XML entities are decoded

READING

A key is a dotted sequence of XML tag names.
This library defines a compact key syntax that names the
text values stored in the document:

	a		names the text content of toplevel <a>...</a>
	a.b.c		names the text content of first <a><b><c>...</c>
	a.cat[3].name	same as a.cats.cat3.name
	a.cat[#]	same as a.cats.total
	a.cat[$]	same as a.cats.cat8, assuming total=8
	a.cat[+]	same as a.cats.cat9, assuming total=8

This library avoids building the whole DOM in memory. Instead,
the XML document is usually mmap'd into virtual memory, and a
small prefix cache is used to remember where parent tags begin.

Access to values are always returned as C strings allocated by malloc(),
NUL-terminated and with XML entities expanded.


WRITING

The library will keeps track of "edits" made to the document.
Subsequent reads of keys are aware of the edits made and return
the new values. Access time is linearly proportional to the length
of the edit list.

To write-out the document, the edit list is "flattened" into
the original XML source and a byte stream is generated.
This process uses memory proportional to the size of the edit list,
and execution time proportional to the product of the DOM size
and the edit list.

